#!/bin/bash

log() {
    echo "$(date +'%Y-%m-%d %H:%M:%S') - $*"
}
export -f log

err() {
    echo -e "\e[31mERROR\e[0m: ${FUNCNAME[1]}: $*"
    return 1
}

# checks for existence of first param in list of everything afterwards
# not whitespace friendly
in_filter() {
    local new_str=$1
    local existing_str=" ${*:2} "
    case "$existing_str" in
        *" $new_str "*)
            true
            ;;
        *)
            false
            ;;
    esac
}

# works on MacOS and other *nix, more complicated because macs are afraid of readlink/realpath
resolve_path() {
    if [[ $# -eq 0 ]]; then
        err "no path specified"
        return 1
    fi
    SOURCE="$*"

    if which python3 >/dev/null; then
        # pathlib is best
        FPATH=$(python3 -c "import pathlib;p=pathlib.Path('$SOURCE');print(p.resolve())")
        if [[ ! -e $FPATH ]]; then
            err "$SOURCE does not exist"
        else
            echo "$FPATH"
        fi
    else
        # resolve $SOURCE until the file is no longer a symlink
        while [[ -L "$SOURCE" ]]; do
            DIR=$(cd -P "$(dirname "$SOURCE")" && pwd)
            SOURCE=$(readlink "$SOURCE")
            # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
            [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
        done
        if [[ -d "$SOURCE" ]]; then
            SDIR=$SOURCE
            SFILE=
        else
            SDIR=$(dirname "$SOURCE")
            SFILE=$(basename "$SOURCE")
        fi
        pushd "$SDIR" >/dev/null || (
            err "cd to $SDIR failed"
            return 1
        )
        FPATH=$(pwd -P)/$SFILE
        popd >/dev/null || (
            err "cd from $SDIR failed"
            return 1
        )
        echo "$FPATH"
    fi
}

cmkdir() {
    [ -d "$1" ] || mkdir -p "$1" || (
        err "mkdir failed: $1"
        return 1
    )
    cd "$1" || (
        err "cd failed: $1"
        return 1
    )
}
export -f cmkdir

cmktemp() {
    cd "$(mktemp -d "$@")" || return $?
}

# run basic check on perl/python scripts before uploading
cscp() {
    if [[ -z $1 ]]; then
        err "No file specified"
        return 1
    else
        FNAME=$1
        FEXT=${FNAME:(-3)}
    fi

    if [[ -z $2 ]]; then
        err "No destination specified"
        return 1
    else
        DEST=$2
    fi

    if [[ $FEXT == ".py" ]]; then
        python "$FNAME" -h >/dev/null && scp "$FNAME" "$DEST"
    elif [[ $FEXT == ".pl" ]]; then
        perl -c "$FNAME" && scp "$FNAME" "$DEST"
    else
        scp "$FNAME" "$DEST"
    fi
}

g() {
    if git rev-parse 2>/dev/null; then
        git status -sb
    else
        err "not in a git repo"
    fi
}

moo() {
    for req in cowsay fortune; do
        if ! which $req >/dev/null 2>&1; then
            err "No $req, cannot moo"
            return 1
        fi
    done
    FTYPE=${FTYPE:-bofh-excuses}
    if ! fortune -f 2>&1 | grep -q "$FTYPE"; then
        FTYPE=
    fi
    # LANG must be exported as something with utf8 for some special characters to print
    ESTR='o=X$@*-O.¿¡'
    TSTR='    UV^Ü'
    E=${ESTR:$(($(tr -cd 0-9 </dev/urandom | head -c 2) % ${#ESTR})):1}
    T=${TSTR:$(($(tr -cd 0-9 </dev/urandom | head -c 2) % ${#TSTR})):1}
    fortune "$FTYPE" | /usr/games/cowsay -n -e "$E$E" -T "$T "
    echo
}

mootrek() {
    FTYPE=startrek moo
}

pcnt() {
    local CNT=0
    CNT=$(pgrep -P $$ | wc -l)
    echo $((CNT - 1))
}

port_used() {
    if [[ -z $* ]]; then
        err "no port specified"
        return 1
    fi
    netstat -pnlt 2>/dev/null | grep -c ":$1\>"
}

pps() {
    local SUBP
    mapfile -t SUBP < <(pgrep "$1")
    if [[ -n "${SUBP[*]}" ]]; then
        ps wwu "${SUBP[@]}"
    else
        err "No '$1' processes found"
    fi
}

tun() {
    if [[ $# -eq 0 || $# -gt 2 ]]; then
        echo "You must specify where to tunnel"
        echo
        echo "tun < hostname > [ portnum ]"
        echo
        return 1
    else
        DEF_PORT=8080
        TUN_HOST=$1
        TUN_PORT=$2
        if [[ $(pps ssh | grep -wc "$TUN_HOST") -gt 0 ]]; then
            CURR_PORT=$(pps ssh | grep -w "$TUN_HOST" | grep -owP -- "-D \d+" 2>/dev/null | cut -f2 -d' ')
            if [[ -n $CURR_PORT ]]; then
                err "Tunnel to $TUN_HOST already exists on port $CURR_PORT"
            fi
        elif [[ -n $TUN_PORT ]] && [[ $(port_used "$TUN_PORT") -gt 0 ]]; then
            CURR_TUN=$(pps ssh | grep -w -- "-D $TUN_PORT" | perl -lane 'print pop @F')
            err "Can't create tunnel to $TUN_HOST, tunnel to $CURR_TUN already running on $TUN_PORT"
        else
            TUN_PORT=${TUN_PORT:-$DEF_PORT}
            PORT_IN_USE=$(port_used "$TUN_PORT")
            while [[ "$PORT_IN_USE" -ne 0 ]]; do
                TUN_PORT=$((TUN_PORT + 1))
                PORT_IN_USE=$(port_used $TUN_PORT)
            done
            ssh -D $TUN_PORT -fCqN "$TUN_HOST"
            ERR_CODE=$?
            if [[ $ERR_CODE -ne 0 ]]; then
                err "Error setting up tunnel to $TUN_HOST: $ERR_CODE"
            else
                # echo -e "\$?: $?\n\$!: $!"
                echo "Tunnel to $TUN_HOST created on port $TUN_PORT"
            fi
        fi
    fi
}

tunlist() {
    pps ssh | grep fCqN | perl -lane 'push @tuns, [@F[1,-3,-1]]}{print join("\t", qw(PID PORT HOST));print join("\t", @$_) foreach (@tuns)'
}

docker-ip() {
    if [[ -z $1 ]]; then
        err "no container ID/name specified"
    elif [[ $(docker ps | grep -wc "$1") != "1" ]]; then
        err "invalid container ID/name specified"
    else
        docker inspect "$1" | jq -r '.[0].NetworkSettings.IPAddress'
    fi
}

# I can never remember ps state codes
ps_state() {
    if [[ -z $1 ]]; then
        err "no state code specified"
    else
        local base_state state_modifier desc
        case ${1:0:1} in
            D)
                base_state="uninterruptible sleep"
                ;;
            R)
                base_state="running"
                ;;
            S)
                base_state="interruptible sleep"
                ;;
            T)
                base_state="stopped"
                ;;
            Z)
                base_state="zombie"
                ;;
            *)
                base_state="invalid code: ${1:0:1}"
                ;;
        esac
        if [[ -n ${1:1:1} ]]; then
            case ${1:1:1} in
                "<")
                    state_modifier="high priority"
                    ;;
                N)
                    state_modifier="low priority"
                    ;;
                L)
                    state_modifier="pages locked in memory"
                    ;;
                s)
                    state_modifier="session leader"
                    ;;
                l)
                    state_modifier="multi-threaded"
                    ;;
                +)
                    state_modifier="foreground"
                    ;;
                *)
                    state_modifier="invalid modifier: ${1:1:1}"
                    ;;
            esac
        fi

        if [[ -z $state_modifier ]]; then
            desc="$base_state"
        else
            desc="$base_state ($state_modifier)"
        fi
        echo "state $1: $desc"
    fi
}

# snap clutters up df listings SO MUCH
dff() {
    if [[ -z "$*" ]]; then
        command df -h | grep -v /snap/
    else
        command df "$@"
    fi
}

# awscli works with DO, except can't change endpoint in config
awsdo() {
    local region=${DO_REGION:-fra1}
    aws --endpoint "https://$region.digitaloceanspaces.com" "$@"
}

dawsdo() {
    local local_creds=${AWS_SHARED_CREDENTIALS_FILE:-$HOME/.aws/credentials}
    local docker_creds=/opt/creds
    local workdir=/workdir
    local version=${AWSCLI_VERSION:-latest}
    local region=${DO_REGION:-fra1}
    if [[ ! -f "$local_creds" ]]; then
        err "No AWS creds file at $local_creds"
    else
        docker run --rm -it \
            -v "$local_creds:$docker_creds" \
            -v "$PWD:$workdir" \
            --user "$(id -u)" \
            -w "$workdir" \
            -e "AWS_SHARED_CREDENTIALS_FILE=$docker_creds" \
            "amazon/aws-cli:$version" \
            --endpoint "https://$region.digitaloceanspaces.com" \
            "$@"
    fi
}

# use default UI app to open a given file/location
o() {
    if [ $# -eq 0 ]; then
        xdg-open . >/dev/null 2>&1
    else
        xdg-open "$@" >/dev/null 2>&1
    fi
}

# nicer man colors / formatting
man() {
    env \
        LESS_TERMCAP_mb="$(printf '\e[1;31m')" \
        LESS_TERMCAP_md="$(printf '\e[1;31m')" \
        LESS_TERMCAP_me="$(printf '\e[0m')" \
        LESS_TERMCAP_se="$(printf '\e[0m')" \
        LESS_TERMCAP_so="$(printf '\e[1;44;33m')" \
        LESS_TERMCAP_ue="$(printf '\e[0m')" \
        LESS_TERMCAP_us="$(printf '\e[1;32m')" \
        man "$@"
}

isup() {
    local uri=$1

    if curl -sILf "$uri" >/dev/null; then
        notify-send --urgency=low "$uri is up"
    else
        notify-send --urgency=critical "$uri is down"
    fi
}

ssh_fingerprint() {
    pubkey=${1:-${HOME}/.ssh/id_rsa.pub}
    if [[ -f $pubkey ]]; then
        ssh-keygen -l -E md5 -f "$pubkey"
    else
        err "Couldn't find pub key: $pubkey"
    fi
}

# zero-based string index of first substring
index() {
    if [[ $# -ne 2 ]]; then
        err "receieved $# args but expected 2"
        echo "usage: ${FUNCNAME[0]} some_str sub_str"
        return 1
    fi
    local target_str=$1
    local substr=$2
    # remove from leftmost substr to end of string
    local str_diff=${target_str%%$substr*}

    if [[ "$str_diff" == "$target_str" ]]; then
        echo -1
        return 255
    else
        echo ${#str_diff}
    fi
}
export -f index

# zero-based string index of last substring
rindex() {
    if [[ $# -ne 2 ]]; then
        err "receieved $# args but expected 2"
        echo "usage: ${FUNCNAME[0]} some_str sub_str"
        return 1
    fi
    local target_str=$1
    local substr=$2
    # remove rightmost substr
    local str_diff=${target_str%$substr*}

    if [[ "$str_diff" == "$target_str" ]]; then
        echo -1
        return 255
    else
        echo ${#str_diff}
    fi
}
export -f rindex
