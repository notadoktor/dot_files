#!/bin/bash

log() {
    echo -e "$(date -Iseconds) - $*"
}
export -f log

err() {
    log "\e[31mERROR\e[0m: ${FUNCNAME[1]}: $*"
    return 1
}
export -f err

# checks for existence of first param in list of everything afterwards
# not whitespace friendly
in_filter() {
    local new_str=$1
    local existing_str=" ${*:2} "
    case "$existing_str" in
        *" $new_str "*)
            true
            ;;
        *)
            false
            ;;
    esac
}
export -f in_filter

# works on MacOS and other *nix, more complicated because macs are afraid of readlink/realpath
resolve_path() {
    if [[ $# -eq 0 ]]; then
        err "no path specified"
        return 1
    fi
    local SOURCE FPATH DIR SDIR SFILE

    SOURCE="$*"
    if which python3 >/dev/null; then
        # pathlib is best
        FPATH=$(python3 -c "import pathlib;p=pathlib.Path('$SOURCE');print(p.resolve())")
        if [[ ! -e $FPATH ]]; then
            err "$SOURCE does not exist"
        else
            echo "$FPATH"
        fi
    else
        # resolve $SOURCE until the file is no longer a symlink
        while [[ -L "$SOURCE" ]]; do
            DIR=$(cd -P "$(dirname "$SOURCE")" && pwd)
            SOURCE=$(readlink "$SOURCE")
            # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
            [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
        done
        if [[ -d "$SOURCE" ]]; then
            SDIR=$SOURCE
            SFILE=
        else
            SDIR=$(dirname "$SOURCE")
            SFILE=$(basename "$SOURCE")
        fi
        pushd "$SDIR" >/dev/null || (
            err "cd to $SDIR failed"
            return 1
        )
        FPATH=$(pwd -P)/$SFILE
        popd >/dev/null || (
            err "cd from $SDIR failed"
            return 1
        )
        echo "$FPATH"
    fi
}

cmkdir() {
    [[ -d "$1" ]] || mkdir -p "$1" || (
        err "mkdir failed: $1"
    )
    cd "$1" || (
        err "cd failed: $1"
    )
}
export -f cmkdir

cmktemp() {
    cd "$(mktemp -d "$@")" || return $?
}

# run basic check on perl/python scripts before uploading
cscp() {
    if (($# != 2)); then
        err "cscp requires 2 arguments: source and destination"
    fi
    local FNAME=$1
    local FEXT=${FNAME:(-3)}
    local DEST=$2

    if [[ $FEXT == ".py" ]]; then
        python "$FNAME" -h >/dev/null && scp "$FNAME" "$DEST"
    elif [[ $FEXT == ".pl" ]]; then
        perl -c "$FNAME" && scp "$FNAME" "$DEST"
    else
        scp "$FNAME" "$DEST"
    fi
}

g() {
    if git rev-parse &>/dev/null; then
        git status -sb
    else
        err "not in a git repo"
    fi
}

gstat() {
    if git rev-parse &>/dev/null; then
        git diff --stat
    else
        err "not in a git repo"
    fi
}

# shellcheck disable=SC2120
randint() {
    local digits=${1:-2}
    tr -cd 0-9 </dev/urandom | head -c "${digits}" | perl -lne 'print(int($_))'
}

# shellcheck disable=SC2120
moo() {
    local FTYPE ESTR TSTR E T
    for req in cowsay fortune; do
        if ! which $req &>/dev/null; then
            err "No $req, cannot moo"
            return 1
        fi
    done
    if [[ -n $1 ]]; then
        FTYPE=$1
    else
        FTYPE=${FTYPE:-bofh-excuses}
    fi
    if ! fortune -f 2>&1 | grep -q "$FTYPE"; then
        FTYPE=
    fi
    # LANG must be exported as something with utf8 for some special characters to print
    ESTR='o=X$@*-O.¿¡'
    TSTR='    UV^Ü'
    E=${ESTR:$(($(randint) % ${#ESTR})):1}
    T=${TSTR:$(($(randint) % ${#TSTR})):1}
    fortune "$FTYPE" | cowsay -n -e "$E$E" -T "$T "
    echo
}

mootrek() {
    FTYPE=startrek moo
}

pcnt() {
    local PID=${1:-$$}
    local CNT
    CNT=$(pgrep -P "${PID}" | wc -l)
    echo $((CNT - 1))
}
export -f pcnt

port_used() {
    if [[ -z $* ]]; then
        err "no port specified"
    fi
    netstat -pnlt 2>/dev/null | grep -c ":$1\>"
}

pps() {
    local SUBP
    mapfile -t SUBP < <(pgrep "$1")
    if [[ -n "${SUBP[*]}" ]]; then
        ps wwu "${SUBP[@]}"
    else
        err "No '$1' processes found"
    fi
}
export -f pps

tun() {
    if (($# == 0 || $# > 2)); then
        echo "You must specify where to tunnel"
        echo
        echo "tun < hostname > [ portnum ]"
        echo
        return 1
    fi

    local CURR_PORT PORT_IN_USE ERR_CODE
    local DEF_PORT=8080
    local TUN_HOST=$1
    local TUN_PORT=$2
    if (($(pps ssh | grep -wcE -- "-D.*$TUN_HOST") > 0)); then
        CURR_PORT=$(pps ssh | grep -w "$TUN_HOST" | grep -owP -- "-D \d+" 2>/dev/null | cut -f2 -d' ')
        if [[ -n $CURR_PORT ]]; then
            err "Tunnel to $TUN_HOST already exists on port $CURR_PORT"
        fi
    elif [[ -n $TUN_PORT ]] && [[ $(port_used "$TUN_PORT") -gt 0 ]]; then
        CURR_TUN=$(pps ssh | grep -w -- "-D $TUN_PORT" | perl -lane 'print pop @F')
        err "Can't create tunnel to $TUN_HOST, tunnel to $CURR_TUN already running on $TUN_PORT"
    else
        TUN_PORT=${TUN_PORT:-$DEF_PORT}
        PORT_IN_USE=$(port_used "$TUN_PORT")
        while [[ "$PORT_IN_USE" -ne 0 ]]; do
            TUN_PORT=$((TUN_PORT + 1))
            PORT_IN_USE=$(port_used $TUN_PORT)
        done
        ssh -D $TUN_PORT -fCqN "$TUN_HOST"
        ERR_CODE=$?
        if [[ $ERR_CODE -ne 0 ]]; then
            err "Error setting up tunnel to $TUN_HOST: $ERR_CODE"
        else
            # echo -e "\$?: $?\n\$!: $!"
            echo "Tunnel to $TUN_HOST created on port $TUN_PORT"
        fi
    fi
}

tunlist() {
    pps ssh | grep fCqN | perl -lane 'push @tuns, [@F[1,-3,-1]]}{print join("\t", qw(PID PORT HOST));print join("\t", @$_) foreach (@tuns)'
}

docker-ip() {
    if [[ -z $1 ]]; then
        err "no container ID/name specified"
    elif [[ $(docker ps | grep -wc "$1") != "1" ]]; then
        err "invalid container ID/name specified"
    else
        docker inspect "$1" | jq -r '.[0].NetworkSettings.IPAddress'
    fi
}
export -f docker-ip

# I can never remember ps state codes
ps_state() {
    if [[ -z $* ]]; then
        err "no state code specified"
    fi
    local state_code=$1

    local -a states invalid
    local desc
    case ${state_code:0:1} in
        D)
            states+=("uninterruptible sleep")
            ;;
        I)
            states+=("Idle kernel thread")
            ;;
        R)
            states+=("running")
            ;;
        S)
            states+=("interruptible sleep")
            ;;
        T)
            states+=("stopped")
            ;;
        t)
            states+=("tracing stop")
            ;;
        W)
            states+=("paging")
            ;;
        X)
            states+=("dead")
            ;;
        Z)
            states+=("zombie")
            ;;
        "<")
            states+=("high priority")
            ;;
        N)
            states+=("low priority")
            ;;
        L)
            states+=("pages locked in memory")
            ;;
        s)
            states+=("session leader")
            ;;
        l)
            states+=("multi-threaded")
            ;;
        +)
            states+=("foreground")
            ;;
        *)
            invalid+=("${state_code:0:1}")
            ;;
    esac

    if [[ -n ${states[*]} ]]; then
        desc="${states[*]}"
    fi
    echo "state $1: $desc"
}

# snap clutters up df listings SO MUCH
df() {
    if [[ -z "$*" ]]; then
        command df -h | grep -v /snap/
    else
        command df "$@"
    fi
}

# awscli works with DO, except can't change endpoint in config
awsdo() {
    local region=${DO_REGION:-fra1}
    aws --endpoint "https://$region.digitaloceanspaces.com" "$@"
}

dawsdo() {
    local local_creds=${AWS_SHARED_CREDENTIALS_FILE:-$HOME/.aws/credentials}
    local docker_creds=/opt/creds
    local workdir=/workdir
    local version=${AWSCLI_VERSION:-latest}
    local region=${DO_REGION:-fra1}
    if [[ ! -f "$local_creds" ]]; then
        err "No AWS creds file at $local_creds"
    else
        docker run --rm -it \
            -v "$local_creds:$docker_creds" \
            -v "$PWD:$workdir" \
            --user "$(id -u)" \
            -w "$workdir" \
            -e "AWS_SHARED_CREDENTIALS_FILE=$docker_creds" \
            "amazon/aws-cli:$version" \
            --endpoint "https://$region.digitaloceanspaces.com" \
            "$@"
    fi
}

# use default UI app to open a given file/location
o() {
    if [[ $# -eq 0 ]]; then
        xdg-open . >/dev/null 2>&1
    else
        xdg-open "$@" >/dev/null 2>&1
    fi
}

# nicer man colors / formatting
man() {
    env \
        LESS_TERMCAP_mb="$(printf '\e[1;31m')" \
        LESS_TERMCAP_md="$(printf '\e[1;31m')" \
        LESS_TERMCAP_me="$(printf '\e[0m')" \
        LESS_TERMCAP_se="$(printf '\e[0m')" \
        LESS_TERMCAP_so="$(printf '\e[1;44;33m')" \
        LESS_TERMCAP_ue="$(printf '\e[0m')" \
        LESS_TERMCAP_us="$(printf '\e[1;32m')" \
        man "$@"
}

isup() {
    local uri=$1

    if curl -sILf "$uri" >/dev/null; then
        notify-send --urgency=low "$uri is up"
    else
        notify-send --urgency=critical "$uri is down"
    fi
}
export -f isup

ssh_fingerprint() {
    local pubkey=${1:-${HOME}/.ssh/id_rsa.pub}
    if [[ -f $pubkey ]]; then
        ssh-keygen -l -E md5 -f "$pubkey"
    else
        err "Couldn't find pub key: $pubkey"
    fi
}

# zero-based string index of first substring
index() {
    if (($# != 2)); then
        err "receieved $# args but expected 2"
        echo "usage: ${FUNCNAME[0]} some_str sub_str"
        return 1
    fi
    local target_str=$1
    local substr=$2
    # remove from leftmost substr to end of string
    local str_diff=${target_str%%"$substr"*}

    if [[ "$str_diff" == "$target_str" ]]; then
        echo -1
        return 255
    else
        echo ${#str_diff}
    fi
}
export -f index

# zero-based string index of last substring
rindex() {
    if (($# != 2)); then
        err "receieved $# args but expected 2"
        echo "usage: ${FUNCNAME[0]} some_str sub_str"
        return 1
    fi
    local target_str=$1
    local substr=$2
    # remove rightmost substr
    local str_diff=${target_str%"$substr"*}

    if [[ "$str_diff" == "$target_str" ]]; then
        echo -1
        return 255
    else
        echo ${#str_diff}
    fi
}
export -f rindex

# check if sudo is needed to to write to the given file/dir
need_sudo() {
    local target=$1
    local stat_resp privs dir_gname dir_uname user_groups
    # octal permissions, group name, user name
    read -ra stat_resp < <(stat -Lc "0%a %G %U" "$target")
    privs=${stat_resp[0]}
    dir_gname=${stat_resp[1]}
    dir_uname=${stat_resp[2]}
    if ((EUID == 0)); then
        false
    elif ((privs & 0002)); then
        # world writable
        false
    elif ((privs & 0020)); then
        # group writable, is user in that group?
        mapfile -t user_groups <(groups "$USER")
        if in_filter "$dir_gname" "${user_groups[@]}"; then
            false
        fi
    elif ((privs & 0200)) && [[ "$USER" == "$dir_uname" ]]; then
        false
    fi
}
export -f need_sudo

resolve_url() {
    local url=$1
    local method=${2:-HEAD}
    curl -Ls -o /dev/null -X "$method" -w "%{url_effective}\n" "$url"
}
export -f resolve_url

ex() {
    if [[ -f $1 ]]; then
        case $1 in
            *.tar.bz2)
                tar xjf "$1"
                ;;
            *.tar.gz)
                tar xzf "$1"
                ;;
            *.bz2)
                bunzip2 "$1"
                ;;
            *.rar)
                unrar x "$1"
                ;;
            *.gz)
                gunzip "$1"
                ;;
            *.tar)
                tar xf "$1"
                ;;
            *.tbz2)
                tar xjf "$1"
                ;;
            *.tgz)
                tar xzf "$1"
                ;;
            *.zip)
                unzip "$1"
                ;;
            *.Z)
                uncompress "$1"
                ;;
            *.7z)
                7z x "$1"
                ;;
            *)
                echo "'$1' cannot be extracted via ex()"
                ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

lscnt() {
    local args
    if (($# == 0)); then
        args=(.)
    else
        args=("$@")
    fi
    find "${args[@]}" -maxdepth 1 -print | wc -l
}
export -f lscnt

clean_str() {
    local str=$1 clean_str
    clean_str=$(printf "%s" "${str// /_}" | tr $'\n' '_')
    clean_str=${clean_str//[^[:alnum:]_-]/}
    echo "$clean_str"
}
export -f clean_str

mamba-update() {
    if ! command -v mamba &>/dev/null; then
        log "mamba not found, nothing to do"
        return 2
    elif ! command -v jq &>/dev/null; then
        log "jq not found, can't parse output of mamba env list"
        return 1
    fi

    declare -a env_names updated_envs
    local install_log
    if [[ -n $* ]]; then
        env_names+=("$@")
    else
        mapfile -t env_names < <(mamba env list --json | jq -rc '.envs[]' | grep -oP '(?<=envs/)python3.*$')
        env_names=(base "$HOSTNAME" "${env_names[@]}")
    fi
    log "Checking for updates in ${#env_names[@]} environments"

    for env in "${env_names[@]}"; do
        [[ -n $VERBOSE ]] && log "$env - Checking for updates"
        if mamba update -n "$env" --all -d |& grep -q 'All requested packages already installed'; then
            continue
        fi
        install_log=$(mktemp -t "mamba-update-$env.XXXXXX")
        log "$env - installing updates"
        mamba update -n "$env" --all -y &>"$install_log" || {
            err "$env - mamba update failed, see $install_log"
        }
        perl -lne 'if (!$do_print){ /^\s+Package/ && do {$do_print++; print}} else {print; last if /^\s+Total download/;}' "$install_log"
        log "$env - update complete"
        updated_envs+=("$env")
    done

    if ((${#updated_envs[@]} > 0)); then
        log "Updated mamba envs:"
        printf '%s\n' "${updated_envs[@]}"
    else
        log "No updates found"
    fi
}

# extract audio codec used in a video file
# requires ffprobe
get_audio_codec() {
    local video_file=$1
    ffprobe -v error -select_streams a:0 -show_entries stream=codec_name -of default=noprint_wrappers=1:nokey=1 "$video_file"
}

# extract audio track from a video file
# requires ffmpeg
extract_audio() {
    local video_file=$1 audio_file audio_codec
    audio_codec=$(get_audio_codec "$video_file")
    if [[ -z $audio_codec ]]; then
        err "no audio track found in $video_file"
        return 1
    fi
    audio_file=$(clean_str "${video_file%.*}").$audio_codec
    echo "extracting audio track to $audio_file"
    ffmpeg -v error -i "$video_file" -vn -acodec copy "$audio_file"
}

# jupyter lab wrapper
jlab() {
    local jlab_log jupy_dir jlab_env cmd
    jlab_env=${JUPYTER_ENV:-jupyter}
    jupy_dir=${JUPY_DIR:-/data/jupyter}
    export JUPYTER_CONFIG_DIR=$jupy_dir/etc
    export JUPYTER_DATA_DIR=$jupy_dir/data
    jlab_log=$jupy_dir/logs/jupyter-server.log

    cmd=(conda run -n "$jlab_env" jupyter)
    "${cmd[@]}" --help >/dev/null || return $?

    if [[ -n "$*" ]]; then
        "${cmd[@]}" "$@"
    else
        # use a subshell so background process doesn't clutter session
        (
            nohup "${cmd[@]}" lab &>>"$jlab_log" &
        )
    fi
}
